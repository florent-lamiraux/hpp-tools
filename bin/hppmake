#/bin/bash
#
# vim: ft=sh

makeargs="-s -j4"
makecommand="install"
BDIR=build
LOGFILE="/tmp/hppmake.log"
run_cmake=0

function usage() {
  echo -e "Usage: $0 <options> <packages> <options> <packages> ..."
  echo -e ""
  echo -e "Options are:"
  echo -e "-h|--help"
  echo -e "-d|--debug       \tequivalent to --build-dir build"
  echo -e "-r|--release     \tequivalent to --build-dir build-rel"
  echo -e "--build-dir      \twhere make is executed [${BDIR}]"
  echo -e "--cmake          \trun cmake for every following build"
  echo -e "--no-cmake       \tdo not run cmake for every following build"
  echo -e "-c|--make-command\tmake targets [${makecommand}]"
  echo -e "-a|--make-args   \tmake arguments [${makeargs}]"
  echo -e "-l|--show-log    \tshow make output [default]"
  echo -e "-L|--no-show-log \tredirect make output to ${LOGFILE}"
  echo -e ""
  echo -e "Examples:"
  echo -e "$0 -d hpp-core -r hpp-corbaserver -d hpp-manipulation -r hpp-manipulation-urdf hpp-manipulation-corba"
}

test -f ${LOGFILE} && rm ${LOGFILE}
exec 3>&1

show_usage=true
while  [[ $# > 0 ]]
do
  key="$1"

  case $key in
    -h|--help)
      usage
      exit 0
      ;;
    -d|--debug)
      BDIR=build
      ;;
    -r|--release)
      BDIR=build-rel
      ;;
    --build-dir)
      BDIR="$2"
      shift # past argument
      ;;
    -a|--make-args)
      makeargs=$2
      shift
      ;;
    --no-cmake)
      run_cmake=0
      ;;
    --cmake)
      run_cmake=1
      ;;
    -c|--make-command)
      makecommand=$2
      shift
      ;;
    -l|--show-log)
      exec 3>&1
      ;;
    -L|--no-show-log)
      echo "Redirecting stdout to ${LOGFILE}"
      exec 3> /tmp/hppmake.log
      ;;
      *)
      # Run make on current package
      echo "============================="
      if [ ${run_cmake} != 0 ]; then
        echo "cd ${DEVEL_DIR}/src/$1/$BDIR"
        echo "cmake ${DEVEL_DIR}/src/$1"
        cd "${DEVEL_DIR}/src/$1/$BDIR" && cmake "${DEVEL_DIR}/src/$1" >&3
        retcode=$?
        if [ $retcode != 0 ]; then exit $retcode; fi
      fi
      echo "cd ${DEVEL_DIR}/src/$1/$BDIR"
      echo "make $makeargs $makecommand"
      cd "${DEVEL_DIR}/src/$1/$BDIR" && make $makeargs $makecommand >&3
      retcode=$?
      if [ $retcode != 0 ]; then exit $retcode; fi
      echo "============================="
      show_usage=false
      ;;
  esac
  shift # past argument or value
done

if $show_usage ; then
  usage
  exit 1
fi
